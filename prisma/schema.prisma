generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String?
  firstName    String
  lastName     String
  phoneNumber  String?
  createdAt    DateTime @default(now())
  dni          String?
  photoUrl     String?
  googleId     String?  @unique

  player Player?
}

model Match {
  id                 Int      @id @default(autoincrement())
  dateTime           DateTime
  location           String
  description        String?
  categoryId         Int
  pointsDeviation    Int?
  statusId           Int
  createdAt          DateTime @default(now())
  creatorPlayerId    Int
  genderId           Int
  duration           Int?
  localMin           Int      @default(dbgenerated()) @map("local_min") @db.SmallInt
  winnerTeamNumber   Int?
  resultLoadedByTeam Int?

  creator             Player                @relation("creatorMatch", fields: [creatorPlayerId], references: [id])
  gender              Gender                @relation(fields: [genderId], references: [id])
  status              MatchStatus           @relation(fields: [statusId], references: [id])
  players             Player[]              @relation("matchPlayers")
  teams               Team[]
  sets                Set[]
  applications        Application[]
  category            Category              @relation(fields: [categoryId], references: [id])
  playerRankingChange PlayerRankingChange[]
  notificationIntents NotificationIntent[]

  @@index([localMin], map: "idx_match_local_min")
  @@index([categoryId, genderId, dateTime])
}

model Player {
  id            Int     @id @default(autoincrement())
  firstName     String?
  lastName      String?
  categoryId    Int?
  rankingPoints Int     @default(0)
  phone         String?
  userId        Int?    @unique
  genderId      Int?
  positionId    Int?
  confidence    Float   @default(0.1)

  position            PlayerPosition?       @relation(fields: [positionId], references: [id])
  teams               Team[]
  matches             Match[]               @relation("matchPlayers")
  gender              Gender?               @relation(fields: [genderId], references: [id])
  user                User?                 @relation(fields: [userId], references: [id])
  matchesCreated      Match[]               @relation("creatorMatch")
  applications        Application[]
  category            Category?             @relation(fields: [categoryId], references: [id])
  playerRankingChange PlayerRankingChange[]
  expoPushTokens      ExpoPushToken[]
  notificationIntents NotificationIntent[]
}

model Team {
  id         Int @id @default(autoincrement())
  matchId    Int
  teamNumber Int

  match   Match    @relation(fields: [matchId], references: [id])
  players Player[]

  @@unique([matchId, teamNumber])
}

model MatchStatus {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  label       String
  description String?

  matches Match[]
}

model Set {
  id         Int @id @default(autoincrement())
  matchId    Int
  setNumber  Int
  team1Score Int
  team2Score Int

  match Match @relation(fields: [matchId], references: [id])

  @@unique([matchId, setNumber])
}

model Application {
  id         Int      @id @default(autoincrement())
  matchId    Int
  playerId   Int
  teamNumber Int?
  message    String?
  phone      String?
  reason     String?
  createdAt  DateTime @default(now())
  statusId   Int

  status ApplicationStatus @relation(fields: [statusId], references: [id])
  match  Match             @relation(fields: [matchId], references: [id])
  player Player            @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
}

model ApplicationStatus {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  label       String
  description String?

  applications Application[]
}

model Gender {
  id         Int    @id @default(autoincrement())
  code       String @unique
  name       String
  pluralName String
  order      Int

  matches    Match[]
  players    Player[]
  categories Category[]
}

model Category {
  id            Int    @id @default(autoincrement())
  code          String @unique
  description   String
  genderId      Int
  initialPoints Int
  minPoints     Int    @default(0)
  maxPoints     Int    @default(0)
  order         Int    @default(0)

  gender  Gender   @relation(fields: [genderId], references: [id])
  players Player[]
  matches Match[]
}

model PlayerPosition {
  id          Int    @id @default(autoincrement())
  code        String @unique
  description String
  order       Int

  players Player[]
}

model Question {
  id             Int    @id @default(autoincrement())
  code           String @unique
  label          String
  questionTypeId Int

  answers QuestionAnswer[]
  type    QuestionType     @relation(fields: [questionTypeId], references: [id])
}

model QuestionAnswer {
  id         Int    @id @default(autoincrement())
  code       String @unique
  label      String
  points     Int
  questionId Int

  question Question @relation(fields: [questionId], references: [id])
}

model QuestionType {
  id   Int    @id @default(autoincrement())
  code String @unique

  questions Question[]
}

model PlayerRankingChange {
  id          Int      @id @default(autoincrement())
  matchId     Int
  playerId    Int
  isWinner    Boolean
  oldPoints   Int
  deltaPoints Int
  newPoints   Int
  createdAt   DateTime @default(now())

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
}

model ExpoPushToken {
  id         Int      @id @default(autoincrement())
  playerId   Int
  token      String   @unique
  deviceType String?
  lastSeenAt DateTime @default(now())

  player Player @relation(fields: [playerId], references: [id])

  @@index([playerId])
}

model NotificationIntent {
  id          Int                      @id @default(autoincrement())
  type        NotificationIntentType
  status      NotificationIntentStatus @default(PENDING)
  scheduledAt DateTime
  executedAt  DateTime?
  matchId     Int
  playerId    Int?
  payload     Json?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dedupeKey   String?                  @unique

  match  Match  @relation(fields: [matchId], references: [id])
  player Player? @relation(fields: [playerId], references: [id])

  @@index([scheduledAt, status])
  @@index([matchId])
  @@index([playerId])
}

enum NotificationIntentType {
  PLAYER_ADDED
  MATCH_REMINDER_1H
  MATCH_POST_1H
}

enum NotificationIntentStatus {
  PENDING
  SCHEDULED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
